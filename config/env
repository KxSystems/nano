
export COMPRESS=""

# Number of threads each kdb+ process
export THREADNR=1

export FLUSH=./flush/directmount.sh

# Tests that wont be executed
# Whitespace separated list that also accepts regular expressions - see https://code.kx.com/q/basics/regex/.
# Example:
# export EXCLUDETESTS=".cpu.* .xasc.phash"
export EXCLUDETESTS=""

export SUDO="sudo"  # or "sudo" if sudo is required for some commands e.g. to flush page cache

##############
# Settings for object storage
# See this for more details: https://code.kx.com/insights/1.4/core/objstor/main.html
export OBJSTORELOCTMPDIRBASE=/mnt/${USER}/OBJSTORETEST
# Comment line below for testing without object storage cache
export KX_OBJSTR_CACHE_PATH=/mnt/${USER}/OBJSTORECACHE

export AWS_REGION=eu-west-1
export GCLOUD_PROJECT_ID=myproject
export AZURE_STORAGE_ACCOUNT=mystorageaccount
export AZURE_STORAGE_SHARED_KEY=mysharedkey


###############################################
#### You probably dont need to change this

# number of distinct symbols
export SYMNR=10000

export RESULTDIR="./results"
export LOGDIR="./logs"

# Data size for the sequential read/write tests. By default 30% of the physical memory is used.
# Testing with unnecessary large vectors just prolongs the test execution without adding value, 
# so a size limit is applied.
export SEQWRITETESTLIMIT=$((8*1024*1024*1024)) # 8 GB

# Data size for xasc test.
export SORTFILESIZE=$((16*1024*1024*1024)) # 16 GB

# For the random read, we create a file of size RANDREADFILESIZE
# then random read altogether RANDREADAMOUNT amount of data.
export RANDREADNUMBER=$((100*1024*1024)) #reading 100 million items
export RANDREADFILESIZE=$((4000*1024*1024)) # persisting 8 billion items


# Mainly for testing, you can generate small or tiny data
export DBSIZE=full


