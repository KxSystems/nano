
export COMPRESS=""

# Number of threads each kdb+ process
export THREADNR=4

# Number of files each worker process reads during the random read test
export FILENRPERWORKER=4

export FLUSH=./flush/directmount.sh

# Tests that wont be executed
# Whitespace separated list that also accepts regular expressions - see https://code.kx.com/q/basics/regex/.
# Example:
# export EXCLUDETESTS=".cpu.* .xasc.phash"
export EXCLUDETESTS=""

export SUDO="sudo"  # "" or "sudo" if sudo is required for some commands e.g. to flush page cache

# Worker processes can be started with a numactl command.
# Option `roundrobin` means that worker `i` is started on numa node `i mod N` where N is the number of numa nodes.
# If N is 1 or NUMA is set to `nonuma` then no numactl is used.
export NUMA="nonuma" # nonuma or roundrobin

##############
# Settings for object storage
# See this for more details: https://code.kx.com/insights/1.4/core/objstor/main.html
export OBJSTORELOCTMPDIRBASE=/mnt/${USER}/OBJSTORETEST
# Comment line below for testing without object storage cache
export KX_OBJSTR_CACHE_PATH=/mnt/${USER}/OBJSTORECACHE

export AWS_REGION=eu-west-1
export GCLOUD_PROJECT_ID=myproject
export AZURE_STORAGE_ACCOUNT=mystorageaccount
export AZURE_STORAGE_SHARED_KEY=mysharedkey


###############################################
#### You probably dont need to change this

# number of distinct symbols
export SYMNR=10000

export LOGDIR="./logs"

export TINYLENGTH=2047                # object size is 16KB, should fit into a typical L1 cache (32KB)
export SMALLLENGTH=$((      63*1024)) # obj size is 512KB, should fit into a typical L2 cache (1 or 2MB)
export MEDIUMLENGTH=$((  4*127*1024)) # obj size is 4MB, should fit into a typical L3 cache depending on the number of workers
export LARGELENGTH=$(( 31*1024*1024)) # obj size is 256MB, should fit into memory only if process count > 1

# Data size for the sequential read/write tests. The size is automatically reduced if there is not enough physical memory.
# Testing with unnecessary large vectors just prolongs the test execution without adding value.
export HUGELENGTH=$((1024*1024*1024)) # obj size is 16GB should fit into memory. 


# Data size for xasc test.
export SORTFILESIZE=$((250*1000*1000)) # 250 million items

# For the random read, we create files of size (RANDREADFILESIZE div FILEPERWORKER)
# then random read altogether RANDREADAMOUNT amount of data.
export RANDREADNUMBER=$((100*1000*1000)) #reading 100 million items
export RANDREADFILESIZE=$((4000*1000*1000)) # persisting 4 billion items


# Mainly for testing, you can generate `small`, `tiny` or `double` data
export DBSIZE=full

export IOSTAT=true  # false to avoid running iostat (and directory to device mapping)

# multiplier to repeat CPU tests in order to use sampling-based system monitoring tools
export CPUREPEAT=1

